/* root of document(whole html)
whatever variables we provide here they are going to be 
present(accessible) for whole html page */
:root{
    --main-color:#00c9a5;
    --nav-color:#00afa5;
    --bg-color:#e8f3f1;
    --black: #2f4858;
    --card-color:#c0dbea;
    --border: 0.1rem solid var(--card-color);
    --box-shadow: 0 0 10px rgba(0,0,0, 0.5);

    /* to use variables in css we have to use double eiphens
    otherwise they wont work */
}

/* generic properties */
*{
    margin:0;
    padding:0;
    /* Many html elements have default margin and padding assigned
    to them, we dont know what those margins and paddings are
    so inorder to be consistent we want to remove all the 
    margin and padding, lateron we can define margin and padding
    to those html elements to those which we actually want to give
    margin and padding, the rest are going to have 0 margin
    and padding */

    box-sizing:border-box;

    /* with this we are ensuring whatever padding we assign to
    an element, that padding is going to be taken from total
    width or height we have given to that element */

    border:none;
    outline:none;
    text-decoration:none;
    text-transform: capitalize;
    font-family: Verdana, Geneva, Tahoma, sans-serif;

    transition: all .5s ease-in;

    scroll-behavior: smooth;
    /* to bring the smooth scrolling effect when we click 
    on a tags in navbar */
    scroll-padding-top: 16vh;
    /* given the same space ocuupied by navbar */

}

html{
    font-size: 62.5%;
    /* 62.5% is 10px, this 10px is easy to visualize and apply
    mathematical operations on them such as making it twice
    which is 20px, making it half means 5px, so its easy to visualize 
    what we are thinking in terms of pixels */
    /* we can later change this for elements as we want */

    overflow-x:hidden;

}

body{
    background-color: var(--bg-color);
    /* to call variables in css we use var(), then pass the variable
    name inside the function; */
}

section{
    padding:2rem 7%;
}

.btn{
    display:inline-block;
    text-align: center;
    background-color: var(--main-color);
    color:#fff;
    font-size: 1.7rem;
    padding: 0.8rem 2.5rem;
    margin-top: 1rem;
    /*margin top and bottom has no effect on this btn 
    because its an inline elementan inline element doesn't 
    take into account top and bottom margin even if we 
    define them. so making it inline-block will do the job*/
    cursor:pointer;
    
}

.btn:hover{
    letter-spacing: .2rem;
}

.title{
    text-shadow: 2px 2px 0 var(--card-color), 
    -2px -2px 0 var(--card-color), -2px 2px 0 var(--card-color),
     2px -2px 0 var(--card-color) ;
    /* ginving shadow top bottom left right and diagnally */
    text-align: center;
    color: #fff;
    text-transform: uppercase;
    padding: 3.5rem 0;
    font-size: 4rem;
}

.title span{
    color:var(--main-color);
}

.header{
    background-color: var(--nav-color);
    display:flex;
    justify-content:space-between;
    align-items:center;
    padding: 1.5rem 7%;

    /* 1.5 rem is for top and bottom, 7% for left and right.
    we have defined root element font size is 62.5% which is
    10px so 1.5rem is 15px */
    /* 7% is dependent on actual space occupied by browser
    or device. */

    position: fixed;
    top:0;
    left:0;
    right:0;
    /* By setting right to 0 we are saying that it should start
    at very left end of browser and end at very right end of browser 
    so basically we are giving it 100% width*/

    /* z-index:1000; */
    /* we should make sure that this element has higher 
    z-index than other elements in the page
    whenever we scroll down this element stays on top of 
    other elements, it doesn't go behind and be invisible*/
    height: 16vh;


}

.header .logo img{
    height: 8rem;
    border-radius: 50%;
}

.header .navbar a{
    color:#fff;
    font-size: 1.8rem;
    margin: 0 1rem;
    /* we dont have to give any top and bottom margin because 
    those margins are already been given because the parent
    element display property is set to flex and align items
    has been set to center so indirectly we got margin on 
    top and bottom */

    

}

.header .navbar a:hover{
    color:var(--black);
    border-top: 0.3rem solid var(--black);
    border-bottom: 0.3rem solid var(--black);
    padding-top:.5rem;
    padding-bottom:.5rem;

}

.header .icons{
    display: flex;
    
}

.header .icons div{
    color: #fff;
    cursor: pointer;
    font-size: 2.5rem;
    margin: 2rem;
}

.header .icons div:hover{
    color: var(--black);
}

.header .icons .menu-icon{
    display:none;
}


.header .search-form{
    display:flex;
    align-items:center;
    position:absolute;
    /* parent of search-form is header whose position is fixed
    now setting position to absolute will look at this header
    section, now this search form will try to position itself
    with respect to header section because header is the 
    parent. */

    top:115%;
    /* search form will start after 115% of height of header */
    right:-100%;  
    /* search form is still there but its not in the visible 
    space */
    width: 45rem;
    height:4.5rem;

    background-color: #fff;
   

}

.header .search-form.active{
    right: 7%;
}

.header .search-form input{
    width:100%;
    /* making the input to occupy 100% width of search form */
    height:100%;
    
    padding:1rem;
    
    /* otherwise the text we type inside search form 
    will automatically capitalize */
    font-size: 1.8rem;
    color:var(--black);
    text-transform: none;

}

.header .search-form label{
    color: var(--black);
    font-size: 2rem;
    padding-right:1.3rem;
    cursor: pointer;
}

.header .search-form label:hover{
    color: var(--main-color);
} 


/* cart section */
.header .cart-items-container{
    position:absolute;
    top:100%;
    right: -100%;
    width: 35rem;
    background-color: #fff;
    height: 80vh;
    border: 1px solid black;
    padding: 0.8rem;
}

.header .cart-items-container.active{
    right:0;
}

.header .cart-items-container .cart-item {
    display:flex;
    align-items:center;
    margin: 2.5rem 0;
    /* border:1px solid black; */
    position: relative;
    gap:1rem;
   
}

.header .cart-items-container a{
    width:100%;
}

.header .cart-items-container .cart-item img{
    width: 7rem;
   
}

.header .cart-items-container .cart-item span{
    position: absolute;
    top: 5%;
    right: 4%;
    font-size: 2rem;
    color: var(--black);
    cursor: pointer;
}

.header .cart-items-container .cart-item span:hover{
    color: red;
}

.header .cart-items-container .cart-item .content h3{
    font-size: 1.5rem;
    color: var(--black);
    padding-bottom: .8rem;
   
}

.header .cart-items-container .cart-item .content .price{
    font-size: 1.5rem;
    color: var(--main-color);
   
   
}


.home{
    display: flex;
    align-items: center;
    min-height: 84vh;
    /* 20vh for header so 80vh for hero, just making hero
    to occupy whole height left */
    margin-top: 16vh;
    background-color: aqua;
    background-image: url("./images/background3.jpg");
    background-repeat: no-repeat;
    /* if background image is smaller than space then saying 
    that dont put multiple copies of same image in the 
    remaining area */
    background-size: cover;
    background-position: right;
    /* ***** */

}

.home .hero{
    width: 60rem;

}

.home .hero h3{
    font-size: 6rem;
    text-transform: uppercase;
    color:#fff;
}

.home .hero p{
    font-size: 2rem;
    font-weight: lighter;
    line-height: 3.2rem;
    /* give line heigt more than font size else we it'll be
    less effective */
    padding: 1rem 0;
    color:#eee;
}


/* cakes section */
.wrapper{
    display: grid;
    /* ****** */
    /* grid-template-columns: repeat(3, 30rem); */
    /* This means we can have atmost 3 cards in each row and 
    each card is going to be 30rem. but this is not responsive
    which means if device is small it is not possible to
    squeeze-in 3 elements in a single row, so solve this
    instead of putting 3 we can use "auto-fit" that means fit
    as many elements as possible and also canging width to 
    min-max */

    grid-template-columns: repeat(auto-fit, minmax(30rem, 1fr));
    /* now we are saying the width of each card is going to
    be minimum 30rem however if there is more space then that
    space should be equally divided and assigned to these 
    elements, so the width can increase if we have more space
    however, a card can have atmost 30rem of width, it can't
    go lower than that but since we have set over here auto-fit
    that means we are not forcing the number of items on each
    row, by setting tis auto-fit value we are saying fit as
    many elements in a single row as possible however the 
    width of each item can not be less than 30rem */
    gap:1.5rem;

}

.cakes .wrapper .cake-card{
    background-color: var(--card-color);
    padding: 3rem 2rem;
    text-align:center;
    transform-origin: top center;
    /* *******
    This will take the top center of every card as transfor
    mation point so, now from this center card will scale
    keeping the center same, now the transformation will
    happen in downward direction when we hover */
}

.cakes .wrapper .cake-card:hover{
    transform:scaleY(1.1);
    /* The problem with this will be item will scale in
    both directions upward and downward but we only want it
    to scale in one direction that is downward direction
    for that we'll use transform-origin in original cake card
    block */
    background-color: var(--black);
}

.cakes .wrapper .cake-card:hover *:not(a){
    color: var(--main-color);
    /* not(a) means anchor element wont have any effect */
    /* also span element wont have any effect because if
    we replace price with div while applying css to span
    element then this will affect the span aswell but we 
    used class name(price)there this is called
    selector specificity, this is like priority given to
    mathematical operations like multiplication and divison
    have more priority than addition and subtraction, so 
    there is a similar concept over here, HTML ELEMENTS HAVE
    LOWER PRIORITY COMPARED TO CLASS NAMES AND CLASS NAMES
    HAVE LOWER PRIORITY COMPARED TO IDS, since we only used
    tag names and classes, whike selecting span we used a
    seperate rule which is more specific to a span which
    is inside an element with class name price, so this is 
    more specific compared to span which is inside a div */
    /* so basically when we are defining this transition, it
    is applied to all the elements including span which is
    inside the price div but because we have a seperate rule
    which is more specific so thats why these properties take
    over and transition effect doesnt take prescedence over
    this specific property so span value didn't transition to
    another color */
}

.cakes .wrapper .cake-card img{
    width: 100%;
    /* ********* */
}

.cakes .wrapper .cake-card h3{
    color:#fff;
    font-size: 2rem;
    padding: 1rem 0;
}

.cakes .wrapper .cake-card .price{
    color:#fff;
    font-size: 1.8rem;
    padding: 0.5rem 0;
}

.cakes .wrapper .cake-card .price span{
    color:#fff;
    font-size: 1.5rem;
    text-decoration: line-through;
}


/* cheesecakes section */
.cheese-cakes .wrapper .cheese-card{
    text-align: center;
    background-color: #eac7c7;
    padding: 2rem;
    border: var(--border);
    

}

.cheese-cakes .wrapper .cheese-card:hover{
    box-shadow: var(--box-shadow);
}

.cheese-cakes .wrapper .cheese-card .icons a{
    border: var(--border);
    height: 5rem;
    width: 5rem;
    color: #fff;
    font-size: 2rem;
    line-height: 5rem;
    margin: 0.3rem;
}

.cheese-cakes .wrapper .cheese-card .icons a:hover{
    background-color: var(--main-color);
    box-shadow: var(--box-shadow);

}
.cheese-cakes .wrapper .cheese-card .img{
    padding: 2.5rem 0;
}

.cheese-cakes .wrapper .cheese-card .img img{
    width: 100%;
    /* height will adjust automatically */
}

.cheese-cakes .wrapper .cheese-card .content h3{
    color: #fff;
    font-size: 2.5rem;
    margin: 1rem 0;

}

.cheese-cakes .wrapper .cheese-card .content .stars{
    padding: 1.8rem;
}

.cheese-cakes .wrapper .cheese-card .content .stars i{
    font-size: 1.7rem;
    color: var(--main-color);
}

.cheese-cakes .wrapper .cheese-card .content .price{
    color: #fff;
    font-size: 1.8rem;
}


.cheese-cakes .wrapper .cheese-card .content .price span{
    color: #fff;
    font-size: 1.4rem;
    text-decoration: line-through;
}



/* new arrivals section */

.new-arrivals .wrapper .card{
    background-color: #ffdca9;
    border: var(--border);

}

.new .arrivals .wrapper .card .img{
    width: 100%;
}

.new-arrivals .wrapper .card .img img{
    height: 100%;
    object-fit: contain;
    width: 100%;

}

.new-arrivals .wrapper .card .content{
    padding: 2rem;
}

.new-arrivals .wrapper .card .content a:nth-of-type(1){
    /* nth-of-type() is gonna look for any element whose type is anchor */
    /* since there are two a tags, we want to target first one, so used 1 */
    font-size: 2.5rem;
    line-height: 5rem;
    /* since this anchor is inline element we cant add top and bottom margins
    so we are using line-height instead of margin */
    color: var(--black);
}

.new-arrivals .wrapper .card .content p{
    color: grey;
    font-size: 1.5rem;
    line-height: 2.5rem;
}

.new-arrivals .wrapper .card:hover .content p{
    color: var(--black);
}

.new-arrivals .wrapper .card .content .btn{
    transform: scale(0);
}

.new-arrivals .wrapper .card:hover .content .btn{
    transform: scale(1);
}


/* about us section */
.about .container{
    display: flex;
    justify-content: center;
    background-color: var(--black);
    flex-wrap: wrap;
}

.about .container .img{
    flex: 1 1 45rem;
    /*short hand for three properties flex grow, flex shrink, flex basis */
    /* this is telling that 45rem is the original size, when there isn't enough 
    space in a single row and hence you have to shrink, so this image will shrink
    with respect to the other elements being shrunk, so if the other elements on the
    same row being shrunk 45% then this image should also dhrink 45%, like wise the same
    is applied to flex grow as well, if there is more space in a single row and other elements 
    are being grown bigger then with respect to those elements this image should also grow as 
    fast or as big as them */
}

.about .container .img img{
    width: 100%;
}

.about .container .content{
    flex: 1 1 45rem;
    padding: 2rem;
}

.about .container .content h3{
   font-size: 3rem;
   color: #fff;
   padding: 1.2rem 0;
}

.about .container .content p{
    font-size: 1.6rem;
    color: #ccc;
    padding: 1rem;
    line-height: 2.2rem;
    /* line height should be bigger than font size */
 }


 /* review section styles */
 .review .wrapper .review-card{
    border: var(--border);
    text-align: center;
    padding: 3rem 2rem;
 }

 .review .wrapper .review-card img{
    height: 4rem;
 }

 .review .wrapper .review-card p{
    font-size: 1.6rem;
    line-height: 2rem;
    color: grey;
    padding: 2.2rem 0;
 }

 .review .wrapper .review-card:hover p{
    color: var(--black);
 }

 .review .wrapper .review-card .customer{
    height: 7rem;
    width: 7rem;
    object-fit: cover;
    /* whole image fits in that area  *** */
    border-radius: 50%;

 }

 .review .wrapper .review-card:hover .customer{
    transform: scale(1.1)
 }

 .review .wrapper .review-card h3{
    padding: 1rem 0rem;
    font-size: 2rem;
    color:#fff;
    text-shadow: 2px 2px 0 var(--card-color), 
    -2px -2px 0 var(--card-color), -2px 2px 0 var(--card-color),
    2px -2px 0 var(--card-color) ;
    
 }

 .review .wrapper .review-card .stars i{
    font-size: 1.5rem;
    color: var(--main-color);
    padding: 0.8rem 0;
 }


 /* contact us section begins */
.contact .contents{
    display: flex;
    background-color: var(--black);
    flex-wrap: wrap;
    gap: 1rem;
    /* height: 50rem; */
}

.contact .contents iframe{
    height: 50rem;
    flex: 1 1 45rem;
    object-fit: cover;

}

.contact .contents form{
    height: 50rem;
    flex: 1 1 45rem;
    text-align: center;
    padding: 5rem 2rem;
}

.contact .contents form h3{
    text-transform: uppercase;
    color: #fff;
    font-size: 3.5rem;
    padding: 1.5rem 0;
}

.contact .contents form .input-box{
    display: flex;
    align-items: center;
    margin-bottom: 2rem;
    border: var(--border);
}

.contact .contents form .input-box span{
    color: #fff;
    font-size: 2rem;
    padding-left: 2rem;
}

.contact .contents form .input-box input{
    background-color: var(--black);
    text-transform: none;
    color: #fff;
    width: 100%;
    padding: 2rem;
    font-size: 1.8rem;
}


/* footer */
footer{
    background-color: var(--black);
    text-align: center;
}

footer .social-media{
    padding: 1rem 0;
}

footer .social-media a{
    height: 5rem;
    width: 5rem;
    border-radius: 50%;
    line-height: 5rem;
    font-size: 2rem;
    color: #fff;
    border: var(--border);
    margin: .5rem;
    /* applies only on left and right since anchor is inline element */
}

footer .social-media a:hover{
    background-color: var(--main-color);
}

footer .links{
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    /* will wrap for smaller screens to be responsive */
    padding: 2rem 0;
    gap: 1rem;
}

footer .links a{
    padding: .7rem 2rem;
    color: #fff;
    border: var(--border);
    font-size: 2rem;
}

footer .links a:hover{
    background-color: var(--main-color);
}

footer .credits{
    font-size: 2rem;
    color: #fff;
    font-weight: lighter;
    padding: 1.5rem;

}

footer .credits span{
    color: var(--main-color);
}


/* tablets and small laptops */

@media(max-width: 992px){
    html{
        font-size: 55%;
    }

    .header .logo img{
        height: 7rem;
    }
}

/* small devices (tablets) */

@media(max-width: 768px){
    section{
        padding: 2rem;
    }

    .header .icons .menu-icon{
        /* menu-icon is inside header, icons which is more 
        specific so access it using all parent class names */
        display: inline-block;
    }

    .home{
        background-position: left;
    }

    .home .hero h3{
        font-size: 4.5rem;
    }

    .home .hero p{
        font-size: 1.5rem;
    }

    .header .navbar{
        position: absolute;
        top: 100%;
        right: -100%;
        width: 30rem;
        background-color: #fff;
        height: 80vh;
    }

    .header .navbar.active{
        right: 0;
    }
    
    .header .navbar a{
        color: var(--main-color);
        display: block;
        font-size: 2rem;
        padding: .5rem;
        margin: 1.5rem;
    }

    .header .search-form{
        width: 92%;
    }

    .header .search-form.active{
        right: 4%;
        /* after 92%, 8% of remaining space is equally divided
        between left and right */
    }
    
}

@media(max-width: 550px){
    html{
        font-size: 50%;
    }
}
